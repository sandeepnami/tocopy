"""
    V2.0 : Python is used to fetch live options data instead of Excel Power Query
    V2.1 : added time to the output file
    V2.2 : added retry for 5min to fetch option chain
    V2_5 : added cookies function
"""
import pandas as pd
import requests
import time
from contextlib import redirect_stdout
import pygame
from datetime import datetime

max_retries = 30
request_timeout = 15 # seconds
iterations = 300
refresh_min = 1 # minutes
refresh_rate = refresh_min*60 # seconds
sound_path = r'C:\Users\10678745\OneDrive - LTIMindtree\Technology\Data Science\web scraping\wow.mp3'
expiry = "16-May-2024"
nifty_range = [22100,22200]
no_of_ranges = 5
columns = ['strikePrice','expiryDate','underlying','openInterest','changeinOpenInterest','lastPrice']
nifty_columns = pd.DataFrame()

get_url = "https://www.nseindia.com/api/option-chain-indices?symbol=NIFTY"
headers = {
    'accept': 'application/json, text/javascript, */*; q=0.01',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'en-US,en;q=0.9',
    'referer': 'https://www.nseindia.com/option-chain',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'x-requested-with': 'XMLHttpRequest',
    'cookie': '_ga=GA1.1.424916270.1715226498; _abck=CDDF4944FDE3A34AEF2708AD8C6585CD~0~YAAQfzYauLZlYVmPAQAAGR77YAtk49Ste9vtDwuAqCMU8XSBfzjdnZ6NbOX35CRKRkslxCfPtgjwc3H40MB+coypaBm9M0YvtdVbd8bXrJTZlI9ZPyNFfhKZJZUytiDK/xe6bvPFsaSzaaWVeyOgGp+UfM50l/TH6W7xt960oQyrtcEyzlEZo5ecxa5bPl+lN7Dk+B6o3lmB5n7kMK3S5i/6mIgjfJqFpF5Dox8MQvCF6Wo7Yif3lJl28+605qJVDmwCXjA5+h4xzfUIrjLOcp1j9qbRkAcygzClTcuw0GDqxU9THsNndJbnxEWKfjKs2UpVdhA8eqR6VBNrx0No6gLG+feaCFcfnfsGMXrxOjmsz6IJSBm+hUr+7I5G123XZJtwp0Liz9HgMFXKwOpwONzBfEp5LSCSriM=~-1~-1~-1; defaultLang=en; _ga_QJZ4447QD3=GS1.1.1715319027.1.0.1715319027.0.0.0; nsit=I0aGN6Z3XdCczYU8b98u6aX5; nseappid=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcGkubnNlIiwiYXVkIjoiYXBpLm5zZSIsImlhdCI6MTcxNTMyNzcyNiwiZXhwIjoxNzE1MzM0OTI2fQ.BpeDqnT0WaVxkKrFBCSSWxbHwF-w-eokQvegWtGuYK4; AKA_A2=A; bm_mi=6BC5C219B8AF45A0724F0B63DB8756EF~YAAQfzYauFjTaFmPAQAAevN/YRcMOPeyb7RjZd27w1ENonpy7TeD8x6rmXEwmK+72S6hipcnGaPoJ+Jhqre0+pwQZiswajcoBCQ49++qVo6jx9fwcuTbKziuV8Nd5al4Cn6k8ezlcg0yiPlo1MnCUlSAu8k8nXt+dBLxFoIDaq8YfFR/yX7D6wJITuCnI5qf/walC7MnkYBhuJ0a35rKNkPIemnExgdkedT+ZlQ7Alub/oM/rICir7U3h1J9ivG90d6sTikiamBn0N3TZxtGuB9nUtKwFTiVFrmeHODmjzQKt91GMKpfZ3nh+fqqRNPaTiwMKBEdeaT6acgi~1; bm_sz=EA138D747736E2725F187EA720ED8E60~YAAQfzYauFrTaFmPAQAAevN/YRc+xdl1g+UFPmcJlmbyog1TC27W51y1TuTTsIFHnsqlboagP2dXeKlxMKw3N+AzpBl7mWV2Wx54N5mITJ0jU+xSkv4EoVsNUZB+B7luYsYy68t7NS3PyEwpngwSNWY95EHzA9nRd0fsXdZaejjGLO5Mw/fbCSdWOEBRYkZxk7drhXxOCD37AMz/Hklua20rQoaUPy/VufCgMO3SpTbQoDr7V1BIcs85hoY60fccN2EUBRO3mo5c2WLeItYxR7Ghd1a3bVHd+xGq9souWRwugShrSkt0WCOKOoe6kn/Zo027FD62UwLGZrdWCMzQKWUVSsdEuX4QBzI4+s1i3+UO8zSouuzAdLj/IudQUHV0xWA7Y9HCAh92XSfwjqH9eNqCb5MdgZD8dwwHMnA13WWkhAvHRks=~4600113~4272452; RT="z=1&dm=nseindia.com&si=935bce32-a777-4144-9274-6306463f8b37&ss=lw08nx9u&sl=0&se=8c&tt=0&bcn=%2F%2F684d0d49.akstat.io%2F"; ak_bmsc=A936E71A01D9218AB4499EEE5664874C~000000000000000000000000000000~YAAQfzYauM3TaFmPAQAAA/h/YReYsR+gGT8Dvud4LiZMJ9x11sCFFbVuOOFB+rlw9ofNp4Izc+zZMoF+vLFOvP8AlRExudDtlUraHDy1J+Ezd6JNIBagRQijt2rr8kF7czYc2dTMp6q1eI0qO7U6plKRyX8bsXLupeK6TTG+Onr54MAMqbB27RYurgzGdW5la2YfjU7Zs8SpDytEpfhunJI8h2hte+ReBDtBLJKeIoRvQ5dJV97GLaZ7FhReZrHiCh2qAXcuPtIKjRPsOY2jazZ8OTEdYWXM1yPMzWF87uJX1q9/cH4fMIxGfZk9RsODNGhzZRGD+joYtORSLuyzPFqGfjf8iN4XBiKy9XSd0Su9+F7+cb/P1AokEuCEjxtcqfUWxdjY/cxmZ0rhxNj0L6HYV8fw8V98dUlShA==; _ga_87M7PJ3R97=GS1.1.1715327727.6.1.1715327727.0.0.0; bm_sv=E833C25B128D6BEDE3418B9C3A6D3C0B~YAAQfzYauOHTaFmPAQAAIfp/YRe7TPy8Q1xje+F2lLwYkNMAnwzM4me8GwRO1eQ1P8zNjTUqvN8VMLJ1Xm5sivB1VmYrW0NlOb5ScLKq8MMWO3RndMtp+HwoYmiuF9qHAYejT29+z7CntYimgzDCEhHrKK0fpf9dzGTFQ0JN3sMxLcpbidkgznBBhw6pgidXlnwhlAHOL+KKA/iT4kIvBWBQXAcCMYlTXdDU/LcKzGd6LEYRjGvBIOdwVfXpqCFMI5C3~1'
}



## Functions
def fetch_cookies(input_cookie=headers.get("cookie")):
    # Send a GET request
    ## check this url once https://www.nseindia.com/option-chain
    response = requests.get(url=get_url, headers=headers, timeout=request_timeout)

    # Get the cookies from the response
    cookies = response.cookies

    # Print the cookies
    for name, value in cookies.items():
        print(f'{name}: {value}')
        if(value == input_cookie):
            print('Cookie is same')


def fetch_live_data(input_cookie=headers.get("cookie")):
    # Retry requests.get in case of failure
    # print('inside function fetch_live_data')
    retries = 0
    while retries < max_retries:
        try:
            response = requests.get(url=get_url, headers=headers, timeout=request_timeout)
            break
        except requests.exceptions.RequestException as e:
            print(f"Request failed. Retrying... ({retries+1}/{max_retries})")
            retries += 1
            time.sleep(refresh_rate)  # Wait for 1 minute before retrying
    if retries == max_retries:
        print("Maximum number of retries reached. Exiting...")
        return None
    
    nifty = pd.DataFrame(response.json()['records']['data'])
    nifty.dropna(inplace=True)
    nifty_columns = pd.DataFrame()
    
    # print(nifty['CE'])
    for column in columns:    
        nifty_columns['CE-'+column] = nifty['CE'].apply(lambda x: x.get(column))
        nifty_columns['PE-'+column] = nifty['PE'].apply(lambda x: x.get(column))
    # print(nifty_columns.head())
    
    nifty_columns.set_index(['CE-expiryDate'],inplace=True)
    # print(nifty_columns.head())
    
    return nifty_columns


def calc_oi(nifty_range = nifty_range, expiry_date=expiry, nifty_columns=nifty_columns):
    
    current_expiry = nifty_columns.loc[expiry_date]
    #strikeprice is same for Calls and PUTS
    current_range = current_expiry[(current_expiry['CE-strikePrice'] >= nifty_range[0]) & (current_expiry['CE-strikePrice'] <= nifty_range[1])]
    ce_oi = current_range['CE-openInterest'].sum()
    pe_oi = current_range['PE-openInterest'].sum()
    
    current_time = datetime.now().time()
    formatted_time = current_time.strftime("%H:%M")
    oi_list_dict = {'time':formatted_time,'ce_oi':ce_oi,'pe_oi':pe_oi}  
    
    return oi_list_dict


def cal_oi_supp(oi_list_dict,supp_list_dict):
    # print(oi_list_dict)
    ce_supp = (oi_list_dict[-1]['pe_oi'] - oi_list_dict[-1]['ce_oi'])*100/ oi_list_dict[-1]['ce_oi']
    pe_supp = (oi_list_dict[-1]['ce_oi'] - oi_list_dict[-1]['pe_oi'])*100/ oi_list_dict[-1]['pe_oi']
    time = oi_list_dict[-1]['time']
    ce_supp, pe_supp = round(ce_supp,2), round(pe_supp,2)
    supp_list_dict.append({'time':time,'ce_supp':ce_supp,'pe_supp':pe_supp})
    
    return supp_list_dict


def play_sound():
    pygame.mixer.init()
    pygame.mixer.music.load(sound_path)
    pygame.mixer.music.play()
    time.sleep(5)
    pygame.mixer.music.stop()
    pygame.mixer.quit()



#Intialisation
nifty_range_array,out_files, oi_list_dict_array,supp_list_dict_array = [], [], [], []
for i in range(-no_of_ranges//2+1,no_of_ranges//2+1):
    nifty_range_array.append([nifty_range[0]+i*100,nifty_range[1]+i*100])
    out_files.append(nifty_range[0]+i*100)
print(nifty_range_array)


#First run
for i in range(no_of_ranges):
    supp_list_dict_array.append([])
    oi_list_dict_array.append([])
    nifty_columns = fetch_live_data()
    oi_list_dict_array[i].append(calc_oi(nifty_range = nifty_range_array[i], nifty_columns=nifty_columns))
print('First run completed')

    
for i in range(iterations):
    time.sleep(refresh_rate)
    nifty_columns = fetch_live_data()
    
    for index in range(no_of_ranges):
        # print(calc_oi(nifty_range = nifty_range_array[index], expiry_date=expiry))
        # print(f"oi_list_dict_array[index] = {oi_list_dict_array[index]}")
        oi_list_dict_array[index].append(calc_oi(nifty_range = nifty_range_array[index], expiry_date=expiry,nifty_columns=nifty_columns))
        # print(f"oi_list_dict_array[index] = {oi_list_dict_array[index]}")
        supp_list_dict_array[index] = cal_oi_supp(oi_list_dict_array[index],supp_list_dict_array[index])
        
        if index == no_of_ranges//2:
            print(supp_list_dict_array[index][-1])
            
            #Check if support change is more than 10% in last 10 minutes
            try:
                # print(f'index = {index}')
                # print(f'supp_list_dict_array[index][0] = {supp_list_dict_array[index][0]}')
                # print(f'supp_list_dict_array[index][-10] = {supp_list_dict_array[index][-10]}')
                change_pe = abs(supp_list_dict_array[index][0]['pe_supp'] - supp_list_dict_array[index][-10]['pe_supp'])
                change_ce = abs(supp_list_dict_array[index][0]['ce_supp'] - supp_list_dict_array[index][-10]['ce_supp'])
                if change_pe > 10 or change_ce > 10:
                    play_sound()
            except:
                pass # donothing in case of exception for starting 10 calculations
                # print('Error in sound')
                    
        with open(str(out_files[index])+'.txt', 'w') as f:
            with redirect_stdout(f):
                for row in supp_list_dict_array[index]:
                    print(row)
    
